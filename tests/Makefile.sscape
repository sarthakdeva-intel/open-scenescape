# SPDX-FileCopyrightText: (C) 2021 - 2025 Intel Corporation
# SPDX-License-Identifier: LicenseRef-Intel-Edge-Software
# This file is licensed under the Limited Edge Software Distribution License Agreement.

SSCAPE_TESTS_PATH=tests/sscape_tests

define unit-docker-compose-recipe=
	$(eval TEST_FOLDER=$1)
	$(eval YML_FILENAME=$2)
	$(eval TEST_IMAGE=$3)
	$(eval DBROOT=$(TEST_DATA)/db_$@)
	$(eval LOGFILE=$(TEST_DATA)/unit/$@-$(shell date -u +"%F-%T").log)
	@set -ex \
	  ; echo RUNNING TEST $@ \
	  ; cd .. \
	  ; mkdir -p $(shell dirname $(LOGFILE)) \
	  ; $(SSCAPE_TESTS_PATH)/secrets.sh \
	  ; env SECRETSDIR=secrets LOGSFORCONTAINER="mqtt_publish" IMAGE=$(TEST_IMAGE):$(VERSION) DBROOT=$(DBROOT) $(RUNTEST) $(YML_FILENAME) \
	  $(UNIT_TEST_COVERAGE_CMD) --source=sscape/ -m pytest -s $(GENERATE_JUNITXML_UNITTEST) $(SSCAPE_TESTS_PATH)/$(TEST_FOLDER)/ 2>&1 | tee -i $(LOGFILE) \
	  ; echo "MAKE_TARGET: $@" | tee -ia $(LOGFILE) \
	  ; echo END TEST $@
endef

define unit-recipe=
	$(eval TEST_FOLDER=$1)
	$(eval DOCKER_IMAGE=$2)
	$(eval DOCKER_IMAGE=$(if $(DOCKER_IMAGE), $(DOCKER_IMAGE), $(IMAGE)))
	$(eval LOGFILE=$(TEST_DATA)/unit/$@-$(shell date -u +"%F-%T").log)
	@set -ex \
	  ; echo RUNNING TEST $@ \
	  ; cd .. \
	  ; mkdir -p $(shell dirname $(LOGFILE)) \
	  ; $(SSCAPE_TESTS_PATH)/secrets.sh \
	  ; tools/scenescape-start --image $(DOCKER_IMAGE) sh -c "export PYTHONPATH=/home/scenescape/SceneScape/ && $(UNIT_TEST_COVERAGE_CMD) --source=sscape/ -m pytest -s $(GENERATE_JUNITXML_UNITTEST) $(SSCAPE_TESTS_PATH)/$(TEST_FOLDER)/" 2>&1 | tee -i $(LOGFILE) \
	  ; echo "MAKE_TARGET: $@" | tee -ia $(LOGFILE) \
	  ; echo END TEST $@
endef

define unit-django-recipe=
	$(eval TEST_FOLDER=$1)
	$(eval DOCKER_IMAGE=$2)
	$(eval DOCKER_IMAGE=$(if $(DOCKER_IMAGE), $(DOCKER_IMAGE), $(IMAGE)))
	$(eval LOGFILE=$(TEST_DATA)/unit/$@-$(shell date -u +"%F-%T").log)
	@set -ex \
	  ; echo RUNNING TEST $@ \
	  ; cd .. \
	  ; mkdir -p $(shell dirname $(LOGFILE)) \
	  ; $(SSCAPE_TESTS_PATH)/secrets.sh \
	  ; tools/scenescape-start --image $(DOCKER_IMAGE) sh -c "$(UNIT_TEST_COVERAGE_CMD) --source=manager/src/django -m pytest -s $(GENERATE_JUNITXML_UNITTEST) --ds=tests.sscape_tests.settings_unittest $(SSCAPE_TESTS_PATH)/$(TEST_FOLDER)/" 2>&1 | tee -i $(LOGFILE) \
	  ; echo "MAKE_TARGET: $@" | tee -ia $(LOGFILE) \
	  ; echo END TEST $@
endef

# Recipes below must be in alphabetical order

autocamcalib-unit: # NEX-T10459
	$(call unit-recipe, autocamcalib, $(IMAGE)-camcalibration-test)

detector-unit: # NEX-T10449
	make -C ../model_installer install-models MODELS=ocr
	$(call unit-docker-compose-recipe, detector, $(COMPOSE)/ovms.yml, $(IMAGE)-percebro-test)

geometry-unit: # NEX-T10454
	$(call unit-recipe, geometry, $(IMAGE)-manager-test)

geospatial-unit: # NEX-T10490
	$(call unit-recipe, geospatial, $(IMAGE)-manager-test)

markerless-unit: # NEX-T10497
	$(call unit-docker-compose-recipe, markerless, $(COMPOSE)/broker.yml:$(COMPOSE)/pgserver.yml:$(COMPOSE)/ntp.yml:$(COMPOSE)/web.yml:$(COMPOSE)/camcalibration.yml, $(IMAGE)-camcalibration-test)

mesh-util-unit:
	$(call unit-recipe, mesh_util, $(IMAGE)-controller-test)

realsense-unit: # NEX-T10455
	$(call unit-recipe, realsense, $(IMAGE)-percebro-test)

scene-unit: # NEX-T10451
	$(call unit-recipe, scene_pytest, $(IMAGE)-controller-test)

scenescape-unit: # NEX-T10450
	$(call unit-recipe, scenescape, $(IMAGE)-manager-test)

schema-unit: # NEX-T10458
	$(call unit-recipe, schema, $(IMAGE)-manager-test)

timestamp-unit: # NEX-T10480
	$(call unit-recipe, timestamp, $(IMAGE)-manager-test)

transform-unit: # NEX-T10512
	$(call unit-recipe, transform, $(IMAGE)-manager-test)

videosource-unit: # NEX-T10453
	$(call unit-recipe, videosource, $(IMAGE)-percebro-test)

views-unit: # NEX-T10479
	$(call unit-django-recipe, views, $(IMAGE)-manager-test)
